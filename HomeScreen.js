import React, { useState } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Modal,
  Image,
  Animated,
  TextInput,
  Alert,
} from "react-native";
import AvatarScreen from "./AvatarScreen";



const HomeScreen = ({ navigation }) => { //ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng gi·ªØa c√°c m√†n h√¨nh trong ·ª©ng d·ª•ng React Native. Prop n√†y cho ph√©p b·∫°n ƒëi·ªÅu h∆∞·ªõng qua l·∫°i gi·ªØa c√°c m√†n h√¨nh.
  const [modalVisible, setModalVisible] = useState(false); //x√°c ƒë·ªãnh tr·∫°ng th√°i hi·ªÉn th·ªã
  const [avatarModalVisible, setAvatarModalVisible] = useState(false);
  const [roomModalVisible, setRoomModalVisible] = useState(false);//t√™n c·ªßa bi·∫øn state,ƒê√¢y l√† m·ªôt h√†m (function),useState l√† m·ªôt hook c·ªßa React, ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o ra m·ªôt state trong m·ªôt function component.
  const [slideAnim] = useState(new Animated.Value(-300));//v·ªã tr√≠ kh·ªüi ƒë·∫ßu c·ªßa m·ªôt animation tr√™n tr·ª•c Y ho·∫∑c X l√† -300 (ngo√†i m√†n h√¨nh)
  const [slideAnimAvatar] = useState(new Animated.Value(-300));

  const [rooms, setRooms] = useState([
    { id: 1, name: "Living Room", devices: 7, image: require("./assets/livingroom.png") },
    { id: 2, name: "Bedroom", devices: 6, image: require("./assets/bedroom.png") },
    { id: 3, name: "Study Room", devices: 3, image: require("./assets/studyroom.png") },
    { id: 4, name: "Kitchen", devices: 8, image: require("./assets/kitchenroom.png") },
  ]);//setRooms: ƒê√¢y l√† h√†m ƒë∆∞·ª£c cung c·∫•p b·ªüi useState, cho ph√©p b·∫°n thay ƒë·ªïi gi√° tr·ªã c·ªßa bi·∫øn

  const [newRoomName, setNewRoomName] = useState("");
  const [newDeviceCount, setNewDeviceCount] = useState("");
  const [selectedRoomId, setSelectedRoomId] = useState(null);

  const openModal = () => {
    setModalVisible(true);
    Animated.timing(slideAnim, {
      toValue: 0,//X√°c ƒë·ªãnh gi√° tr·ªã k·∫øt th√∫c c·ªßa animation
      duration: 300,//X√°c ƒë·ªãnh th·ªùi gian c·ªßa hi·ªáu ·ª©ng (300ms).
      useNativeDriver: false,//s·ª≠ d·ª•ng Native Driver ƒë·ªÉ tƒÉng hi·ªáu su·∫•t kh√¥ng.
    }).start();//Sau khi thi·∫øt l·∫≠p animation v·ªõi timing, h√†m .start() ƒë∆∞·ª£c g·ªçi ƒë·ªÉ b·∫Øt ƒë·∫ßu ch·∫°y hi·ªáu ·ª©ng.
  };

  const closeModal = () => {
    Animated.timing(slideAnim, {
      toValue: -300,
      duration: 300,
      useNativeDriver: false,
    }).start(() => setModalVisible(false));//Sau khi animation k·∫øt th√∫c, h√†m start s·∫Ω nh·∫≠n m·ªôt callback, v√† callback n√†y s·∫Ω ƒë·∫∑t modalVisible v·ªÅ false ƒë·ªÉ ·∫©n modal sau khi animation tr∆∞·ª£t ra ho√†n th√†nh. ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o r·∫±ng modal ch·ªâ ·∫©n khi hi·ªáu ·ª©ng k·∫øt th√∫c ho√†n to√†n.
  };

  const openRoomModal = (roomId = null) => {
    setSelectedRoomId(roomId);
    if (roomId) {
      const room = rooms.find((r) => r.id === roomId);//T√¨m ph√≤ng c√≥ id tr√πng v·ªõi roomId trong m·∫£ng rooms. 
      setNewRoomName(room.name);
      setNewDeviceCount(room.devices.toString());// C·∫≠p nh·∫≠t tr·∫°ng th√°i newDeviceCount v·ªõi s·ªë l∆∞·ª£ng thi·∫øt b·ªã c·ªßa ph√≤ng, ƒë∆∞·ª£c chuy·ªÉn th√†nh chu·ªói ƒë·ªÉ c√≥ th·ªÉ hi·ªÉn th·ªã trong m·ªôt input field
    } else {
      setNewRoomName(""); //x√≥a t√™n ph√≤ng c≈© v√† ƒë·∫∑t t√™n m·ªõi th√†nh chu·ªói r·ªóng,
      setNewDeviceCount("");
    }
    setRoomModalVisible(true);
  };

  const closeRoomModal = () => {
    setRoomModalVisible(false);//ƒê·∫∑t tr·∫°ng th√°i roomModalVisible v·ªÅ false ƒë·ªÉ ·∫©n modal li√™n quan ƒë·∫øn ph√≤ng.
    setSelectedRoomId(null);//ƒê·∫∑t selectedRoomId v·ªÅ null, nghƒ©a l√† kh√¥ng c√≥ ph√≤ng n√†o ƒë∆∞·ª£c ch·ªçn n·ªØa.
    setNewRoomName("");
    setNewDeviceCount("");//X√≥a n·ªôi dung c·ªßa newRoomName v√† newDeviceCount
  };

  const handleSaveRoom = () => { //H√†m n√†y x·ª≠ l√Ω vi·ªác l∆∞u ho·∫∑c c·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt ph√≤ng (room).
    const deviceCount = parseInt(newDeviceCount, 10); //Chuy·ªÉn ƒë·ªïi chu·ªói newDeviceCount th√†nh m·ªôt s·ªë nguy√™n, v√¨ s·ªë l∆∞·ª£ng thi·∫øt b·ªã c·∫ßn l√† m·ªôt s·ªë ch·ª© kh√¥ng ph·∫£i chu·ªói.
    if (selectedRoomId) { // Ki·ªÉm tra n·∫øu c√≥ m·ªôt roomId ƒë∆∞·ª£c ch·ªçn (t·ª©c l√† ƒëang ch·ªânh s·ª≠a ph√≤ng hi·ªán c√≥).
      setRooms((prevRooms) => //H√†m n√†y c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa rooms (m·∫£ng c√°c ph√≤ng). N√≥ s·ª≠ d·ª•ng h√†m map ƒë·ªÉ duy·ªát qua t·ª´ng ph√≤ng trong m·∫£ng:
        prevRooms.map((room) => 
          room.id === selectedRoomId //N·∫øu room.id kh·ªõp v·ªõi selectedRoomId, ph√≤ng ƒë√≥ s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi t√™n m·ªõi (newRoomName) v√† s·ªë l∆∞·ª£ng thi·∫øt b·ªã m·ªõi (deviceCount).
            ? { ...room, name: newRoomName, devices: deviceCount }
            : room
        )
      );
    } else {
      const newRoom = { //N·∫øu selectedRoomId kh√¥ng t·ªìn t·∫°i (t·ª©c l√† ng∆∞·ªùi d√πng ƒëang th√™m m·ªôt ph√≤ng m·ªõi).
        id: rooms.length + 1,// s·ªë ph√≤ng hi·ªán c√≥ +1
        name: newRoomName,
        devices: deviceCount,
        image: require("./assets/on.png"), // H√¨nh ·∫£nh m·∫∑c ƒë·ªãnh cho ph√≤ng m·ªõi
      };
      setRooms((prevRooms) => [...prevRooms, newRoom]);
    }
    closeRoomModal();
  };

  const handleDeleteRoom = () => {
    if (selectedRoomId) { //Ki·ªÉm tra xem c√≥ ph√≤ng n√†o ƒëang ƒë∆∞·ª£c ch·ªçn kh√¥ng.
      Alert.alert("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ph√≤ng n√†y?", [ //Hi·ªÉn th·ªã m·ªôt th√¥ng b√°o x√°c nh·∫≠n
        { text: "H·ªßy", style: "cancel" },
        {
          text: "X√≥a",
          onPress: () => {
            setRooms((prevRooms) =>
              prevRooms.filter((room) => room.id !== selectedRoomId)
            );
            closeRoomModal();
          },
        },
      ]);
    }
  };

  const handleGesture = (event) => {
    const { translationX } = event.nativeEvent;  //Ch·ª©a th√¥ng tin chi ti·∫øt v·ªÅ c·ª≠ ch·ªâ c·ªßa ng∆∞·ªùi d√πng.
    // N·∫øu vu·ªët sang tr√°i
    if (translationX < 100) {
      closeAvatarModal();
    }
  };

  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        {/* Modal cho menu */}
        <Modal transparent={true} visible={modalVisible} animationType="none">
          <TouchableOpacity style={styles.overlay} onPress={closeModal}></TouchableOpacity>
          <Animated.View style={[styles.modalContent, { left: slideAnim }]}>
            <View style={styles.languageSection}>
              <TouchableOpacity style={styles.languageItem}>
                <Image source={require("./assets/vietnam.png")} style={styles.flagIcon} />
                <Text style={styles.languageText}>Ti·∫øng Vi·ªát</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.languageItem}>
                <Image source={require("./assets/uk.png")} style={styles.flagIcon} />
                <Text style={styles.languageText}>English</Text>
              </TouchableOpacity>
            </View>
            <TouchableOpacity style={styles.menuItem}>
              <Image source={require("./assets/home1.png")} style={styles.menuIcon} />
              <Text style={styles.menuText}>Trang ch·ªß</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.menuItem}>
              <Image source={require("./assets/book-user.png")} style={styles.menuIcon} />
              <Text style={styles.menuText}>ƒêƒÉng nh·∫≠p/ ƒêƒÉng k√Ω</Text>
            </TouchableOpacity>
          </Animated.View>
        </Modal>

        {/* Modal cho avatar */}
        <AvatarScreen visible={avatarModalVisible} onClose={() => setAvatarModalVisible(false)} />
        {/* Modal cho ph√≤ng */}
        <Modal transparent={true} visible={roomModalVisible} animationType="slide">
          <View style={styles.roomModalContainer}>
            <Text style={styles.roomModalTitle}>
              {selectedRoomId ? "C·∫≠p nh·∫≠t ph√≤ng" : "Th√™m ph√≤ng"}
            </Text>
            <TextInput
              style={styles.roomInput}
              placeholder="T√™n ph√≤ng"
              value={newRoomName}
              onChangeText={setNewRoomName}
            />
            <TextInput
              style={styles.roomInput}
              placeholder="S·ªë l∆∞·ª£ng thi·∫øt b·ªã"
              value={newDeviceCount}
              onChangeText={setNewDeviceCount}
              keyboardType="numeric"
            />
            <View style={styles.roomModalButtons}>
              <TouchableOpacity onPress={handleSaveRoom} style={styles.roomButton}>
                <Text style={styles.roomButtonText}>L∆∞u</Text>
              </TouchableOpacity>
              {selectedRoomId && (
                <TouchableOpacity onPress={handleDeleteRoom} style={styles.roomButton}>
                  <Text style={styles.roomButtonText}>X√≥a</Text>
                </TouchableOpacity>
              )}
              <TouchableOpacity onPress={closeRoomModal} style={styles.roomButton}>
                <Text style={styles.roomButtonText}>H·ªßy</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>

        {/* Ph·∫ßn header */}
        <View style={styles.header}>
          <TouchableOpacity onPress={openModal}>
            <Image source={require("./assets/menu-burger.png")} style={styles.menuIcon} />
          </TouchableOpacity>
          <TouchableOpacity onPress={() => setAvatarModalVisible(true)}>
          <Image source={require("./assets/avatar.png")} style={styles.avatar} />
        </TouchableOpacity>
        </View>

        <Text style={styles.greetingText}>Hello Tu·∫•n K·∫πo B√©o üëã</Text>
        <Text style={styles.subText}>Welcome to Home</Text>

        {/* Th·∫ª th·ªùi ti·∫øt */}
        <View style={styles.weatherCard}>
          <View style={styles.weatherRow}>
            <Image source={require("./assets/cloudy.png")} style={styles.weatherIcon} />
            <View style={styles.weatherInfo}>
              <Text style={styles.weatherText}>Mostly Cloudy</Text>
              <Text style={styles.weatherLocation}>Sydney, Australia</Text>
            </View>
            <Text style={styles.tempText}>22¬∞C</Text>
          </View>
          <View style={styles.weatherDetails}>
            <Text style={styles.weatherDetail}>27¬∞C Sensible</Text>
            <Text style={styles.weatherDetail}>4% Precipitation</Text>
            <Text style={styles.weatherDetail}>66% Humidity</Text>
            <Text style={styles.weatherDetail}>16 km/h Wind</Text>
          </View>
        </View>

        {/* Ph·∫ßn Rooms */}
        <View style={styles.roomsSection}>
          <Text style={styles.sectionTitle}>Your Rooms</Text>
          <View style={styles.roomGrid}>
            {rooms.map((room) => (
              <View key={room.id} style={styles.roomCardContainer}>
                <TouchableOpacity
                  style={styles.roomCard}
                  onPress={() => navigation.navigate(`${room.name.replace(" ", "")}Screen`)} // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh ph√≤ng t∆∞∆°ng ·ª©ng
                >
                  <Image
                    source={room.image} // S·ª≠ d·ª•ng h√¨nh ·∫£nh t·ª´ d·ªØ li·ªáu
                    style={styles.roomImage}
                  />
                  <Text style={styles.roomName}>{room.name}</Text>
                  <Text style={styles.deviceCount}>{room.devices} Devices</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.threeDots}
                  onPress={() => openRoomModal(room.id)}
                >
                  <Text style={styles.threeDotsText}>‚ãÆ</Text>
                </TouchableOpacity>
              </View>
            ))}
          </View>
        </View>

        <TouchableOpacity style={styles.addButton} onPress={() => openRoomModal()}>
          <Text style={styles.addButtonText}>+</Text>
        </TouchableOpacity>
      </ScrollView>

      {/* Giao di·ªán d∆∞·ªõi c√πng */}
      <View style={styles.bottomContainer}>
        <TouchableOpacity style={styles.iconButton} onPress={() => navigation.navigate('Home')}>
          <Image source={require("./assets/home2.png")} style={styles.icon} />
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.iconButton}>
          <Image source={require("./assets/microphone.png")} style={styles.icon} />
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.iconButton} onPress={() => navigation.navigate('Settings')}>
         <Image source={require("./assets/settings.png")} style={styles.icon} />
      </TouchableOpacity>

      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#FFFFFF", // M√†u n·ªÅn s√°ng h∆°n
  },
  scrollContainer: {
    padding: 20,
    paddingBottom: 100, // ƒê·ªÉ tr√°nh b·ªã ch·ªìng l·∫•p v·ªõi bottom container
  },
  bottomContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 10,
    backgroundColor: "#F0F8FF",
    borderRadius: 20,
    position: "absolute", // Thay ƒë·ªïi t·ª´ "fixed" sang "absolute"
    left: 0,
    right: 0,
    bottom: 0,
    height: 60,
    elevation: 10,
  },
  
  iconButton: {
    justifyContent: "center",
    alignItems: "center",
  },
  icon: {
    width: 30,
    height: 30,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 20,
  },
  menuIcon: {
    width: 30,
    height: 30,
  },
  avatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
  },
  greetingText: {
    color: "#000000", // Ch·ªØ m√†u t·ªëi
    fontSize: 28,
    fontWeight: "bold",
  },
  subText: {
    color: "#555555", // Ch·ªØ ph·ª• m√†u t·ªëi h∆°n
    fontSize: 16,
    marginBottom: 20,
  },
  weatherCard: {
    backgroundColor: "#F0F8FF", // M√†u s√°ng cho th·∫ª th·ªùi ti·∫øt
    borderRadius: 20,
    padding: 20,
    marginBottom: 30,
    elevation: 5, // TƒÉng ƒë·ªô n·ªïi cho th·∫ª th·ªùi ti·∫øt
  },
  weatherRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginBottom: 10,
  },
  weatherIcon: {
    width: 50,
    height: 50,
  },
  weatherInfo: {
    flex: 1,
    marginLeft: 10,
  },
  weatherText: {
    color: "#000000", // Ch·ªØ m√†u t·ªëi
    fontSize: 18,
  },
  weatherLocation: {
    color: "#555555", // Ch·ªØ ph·ª• m√†u t·ªëi h∆°n
    fontSize: 14,
  },
  tempText: {
    color: "#000000", // Ch·ªØ m√†u t·ªëi
    fontSize: 48,
    fontWeight: "bold",
  },
  weatherDetails: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 10,
  },
  weatherDetail: {
    color: "#555555", // Ch·ªØ ph·ª• m√†u t·ªëi h∆°n
    fontSize: 11,

  },
  roomsSection: {
    marginBottom: 30,
  },
  sectionTitle: {
    color: "#000000", // Ch·ªØ ti√™u ƒë·ªÅ m√†u t·ªëi
    fontSize: 24,
    fontWeight: "bold",
  },
  roomGrid: {
    marginTop: 20,
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "space-between",
  },
  roomCardContainer: {
    position: "relative",
    width: "48%",
    marginBottom: 20,
  },
  roomCard: {
    backgroundColor: "#F0F8FF", // M√†u s√°ng cho th·∫ª ph√≤ng
    borderRadius: 20,
    padding: 20,
    alignItems: "center",
  },
  roomImage: {
    width: 60,
    height: 60,
    borderRadius: 10,
    marginBottom: 10,
  },
  roomName: {
    color: "#000000", // Ch·ªØ t√™n ph√≤ng m√†u t·ªëi
    fontSize: 18,
    fontWeight: "bold",
  },
  deviceCount: {
    color: "#555555", // Ch·ªØ ph·ª• m√†u t·ªëi h∆°n
    fontSize: 14,
  },
  addButton: {
    width: 60,
    height: 60,
    backgroundColor: "#FF6F61",
    borderRadius: 30,
    justifyContent: "center",
    alignItems: "center",
    alignSelf: "center",
    position: "absolute",
    bottom: 80,
  },
  addButtonText: {
    color: "#FFFFFF",
    fontSize: 30,
  },
  modalContent: {
    position: "absolute",
    left: 0,
    top: 0,
    bottom: 0,
    width: 300,
    backgroundColor: "#FFFFFF",
    padding: 20,
    justifyContent: "flex-start",
    paddingTop:40,
  },
  avatarModalContent: {
    position: "absolute",
    top: 0,
    right: 0,
    height: "100%",
    width: "100%",
    backgroundColor: "#FFFFFF",
    padding: 20,
    justifyContent: "flex-start",
  },
  avatarInfo: {
    alignItems: "center",
    marginBottom: 20,
    marginTop:20,
  },
  avatarLarge: {
    width: 80,
    height: 80,
    borderRadius: 40,
  },
  userName: {
    fontSize: 18,
    fontWeight: "bold",
    marginTop: 10,
  },
  userHandle: {
    fontSize: 14,
    color: "#AAAAAA",
  },
  backButton: {
    position: "absolute",
    top: 10,
    left: 10,
    width: 40,
    height: 40,
    justifyContent: "center",
    alignItems: "center",
    marginTop:10,
  },
  backButtonIcon: {
    width: 24,
    height: 24,
  },
  menuItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingVertical: 15,
  },
  menuText: {
    fontSize: 18,
    marginLeft: 10,
  },
  tokenText: {
    fontSize: 14,
    color: "#AAAAAA",
  },
  overlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
  },
  flagIcon: {
    width: 30,
    height: 20,
    marginRight: 10,
  },
  languageSection: {
    flexDirection: "row",
    justifyContent: "space-around",
    marginBottom: 20,
  },
  languageItem: {
    flexDirection: "row",
    alignItems: "center",
  },
  languageText: {
    fontSize: 16,
    fontWeight: "bold",
  },
  roomModalContainer: {
    flex: 1,
    justifyContent: "center",
    backgroundColor: "#FFFFFF",
    padding: 20,
    borderRadius: 15,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 6,
    elevation: 10,
  },
  roomModalTitle: {
    fontSize: 22,
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 15,
  },
  roomInput: {
    height: 45,
    borderColor: "#CCCCCC",
    borderWidth: 1,
    borderRadius: 10,
    paddingHorizontal: 15,
    marginBottom: 15,
    fontSize: 16,
  },
  roomModalButtons: {
    flexDirection: "row",
    justifyContent: "space-around",
  },
  roomButton: {
    flex: 1,
    backgroundColor: "#FF6F61",
    borderRadius: 10,
    alignItems: "center",
    paddingVertical: 12,
    marginHorizontal: 5,
  },
  roomButtonText: {
    color: "#FFFFFF",
    fontSize: 16,
    fontWeight: "bold",
  },
  threeDots: {
    position: "absolute",
    right: 10,
    top: 10,
  },
  threeDotsText: {
    color: "#000000", // ƒê·ªïi m√†u cho ba ch·∫•m
    fontSize: 24,
  },
});

export default HomeScreen;
